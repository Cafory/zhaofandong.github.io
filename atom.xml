<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sette&#39;s Page</title>
  <icon>https://www.gravatar.com/avatar/dd485578d37c4e3f5075a3708f064212</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaofandong.github.io/"/>
  <updated>2018-11-13T12:42:24.338Z</updated>
  <id>http://zhaofandong.github.io/</id>
  
  <author>
    <name>Sette</name>
    <email>zhao_f_x@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11-13日 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/11/13/11-13%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/13/11-13日-学习日志/</id>
    <published>2018-11-13T12:36:57.000Z</published>
    <updated>2018-11-13T12:42:24.338Z</updated>
    
    <content type="html"><![CDATA[<p>1.collapse: 切换内容可见性</p><p>a herf=collapse-demo .btn.btn-primary<br>data-toggle=collapse<br>.collaspse #collapse-demo<br>.card.card-body hello </p><p>button<br>.btn btn-primary<br>data-toggle collaspe<br>data-target collapse-demo </p><p>2.Accordion 手风琴<br>div #accordion<br>//命令 .card&gt;.card-header&gt;card-body&gt;hello<br>.card<br>.card-header a hred collaspe-1 data-toggle=collapses<br>.collapse show  #collapse-1  data-parent=#accordion<br>.card-body  hello </p><p>//命令 .card&gt;.card-header&gt;card-body&gt;hello<br>.card<br>.card-header a hred collaspe-2 data-toggle=collapses<br>.collapse #collapse-2  data-parent=#accordion<br>.card-body  hello </p><p>3.dropdown 下拉菜单<br>.dropdown//.btn-group dropup style=postion:absolute;buttom:30%<br>a href .btn.btn-success<br>button #dropdown-demo .btn.btn-outline-wearning dropdown-toggle-sp;ot  data-taggle=”dropdown” data-offset=”15”<br>span.sr-only 包装的文字不会显示在界面上  Dropdown<br>.dropdown-menu show// dropdown-menu-left/right<br>.dropdown-header web languager<br> a href .dropdown-item  html<br>a href .dropdown-item  css<br>a href .dropdown-item  javascript<br>.dropdown-divider 分割线<br>a href .dropdown-item  more<br>$(‘#dropdown-demo’).on(‘show.bs.dropdown’,()=&gt;{console.log(‘show’)}) </p><p>3.jumbotron 大屏幕</p><p>.jumbotron h1/dispaly-1 hello<br>p .lead mb-4 welcome<br>a .btn.btn-primary.btn-lg subscribe</p><p>4.list-group 列表群组<br>div.row<br> div.col-4<br>ul/div .list-group<br>li / a data-toggle=”list” href=#html-content .list-group-item .list-group-item-action active/disable html<br>li / a href.list-group-item .list-group-item-action css<br>li / a href.list-group-item .list-group-item-action.d-fles.justify-content-between.align-items-center javascipt span .badge.badge-primary.badge-pill 12  /span<br>ul/div<br>div .col8=-8<br>div .tab-content<br>div.tab=pane fade show active #html-content hello html<br>div.tab=pane fade #css-content  hello css<br>div.tab=pane fade #javascript-content hello jacascript    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在js中，</span><br><span class="line">$（document）.ready(()=&gt;&#123;</span><br><span class="line">cont list = $(&apos;tab-demo.list-group a&apos;)</span><br><span class="line">list.click(fuction(event)&#123; event.preventDefault()</span><br><span class="line">$(this).tab(&apos;show&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5.Modal 对话框可以放在覆盖当前页面显示</p><p>6.scrollspy 滚动监听<br> 滚动到哪 出现到哪 </p><figure class="highlight plain"><figcaption><span>data-spy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;div class=&quot;component demo&quot; style=&quot;height:300vh&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;div class=&quot;col-3&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>id</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;li class=&quot;nav-item&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>href</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;a href=&quot;#css&quot; class=&quot;nav-link&quot;&gt;css&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;li class=&quot;nav-item&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>href</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;/li&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;h3 id=&quot;html&quot;&gt;HTML&lt;/h3&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>are looking at a numerical representation of your connection known as an IP address.```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```This address signifies a few things about your connection. It tells you your location, and it tells you what sort of connection you have.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>should always check your IP address to ensure your connection is coming from where you intend it to coming from.```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```Find out more about IP addresses here&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>id</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;p&gt;You are looking at a numerical representation of your connection known as an IP address.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>address signifies a few things about your connection. It tells you your location, and it tells you what sort of connection you have.```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```You should always check your IP address to ensure your connection is coming from where you intend it to coming from.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>out more about IP addresses here<p></p>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```&lt;h3 id=&quot;Js&quot;&gt;Js&lt;/h3&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>are looking at a numerical representation of your connection known as an IP address.```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```This address signifies a few things about your connection. It tells you your location, and it tells you what sort of connection you have.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>should always check your IP address to ensure your connection is coming from where you intend it to coming from.```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```Find out more about IP addresses here&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>6.tooltips<br>显示 小提示<br><figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;[data-toggle=&quot;tooltip&quot;]&apos;).tooltip()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.collapse: 切换内容可见性&lt;/p&gt;
&lt;p&gt;a herf=collapse-demo .btn.btn-primary&lt;br&gt;data-toggle=collapse&lt;br&gt;.collaspse #collapse-demo&lt;br&gt;.card.card-body 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-12 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/11/12/11-12-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/12/11-12-学习日志/</id>
    <published>2018-11-12T14:37:45.000Z</published>
    <updated>2018-11-12T15:06:53.263Z</updated>
    
    <content type="html"><![CDATA[<p>学习 bootstrap4  框架<br>container class 可以给设置一个响应式的布局<br>container-fluid 流动<br>class row  每一行<br>class col 每一列<br>col 默认平分12<br>col-6  12个里面占6个 以此类推<br>row align-items-end/center/start 垂直对齐方式<br>row align-self-start  按照自己的方式对齐<br>row justify-content-start 默认的水平对齐方式 center 水平居中<br>水平垂直都居中 row justify-content-center align-items-center<br>在列中排第一col order-first<br>在列中排序 col order-1 order-2 order-3<br>偏移 offset offset-2<br> sm md lg<br> col-sm 560以上 等分 &lt;等分<br>col-sm-6  lg-3 小尺寸中等尺寸 6格子 大尺寸3格<br><figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;h4&gt;Alert&lt;/h4&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><figcaption><span>href</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;button class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;button class=&quot;btn btn-damger close-alter&quot;&gt;``````Close```&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>bt中的jq<br>$(‘…’).ready(()=&gt;{<br>$(‘选择器’).on(‘选择器’,()=&gt;{执行的内容})</p><p>})<br>Badge 标签组件<br>span.baddge.badge-primary/secondary badge-pill<br>breadcrumb 显示用户的位置 导航位置<br>nav<br>ol.breadcrumb<br>li.breadcrumb-item  a<br>li.breadcrumb-item  a<br>li.breadcrumb-item  active<br>button 组件<br>a.button.but-outline-danger(情景类) btn-lg btn-block  disabled<br>群组 ：举例 包装一组按钮<br>div .btn-group  btn-group-vertical 垂直显示<br>.btn.btn-secondary<br>.btn.btn-secondary<br>.btn.btn-secondary<br>/div<br>card 卡片组件（ 没有固定的宽度 随着包装的容器大小变化而变化 ）<br>card-group// card-deck 两个卡片中间有空   //card-colums<br>div .card （包装 ） text-right 右对齐  center 居中 text-white 字体变色<br>img src=”” ajlt=”” class=”card-image-top”<br>.card-header//card-img-overlay<br>.card-body<br>.card-title<br>.card-description<br>.card-footer</p><p>carousel slide 旋转木马  可以循环显示内容  id=”carousel-demo” data-ride=”carousel “ //可以自动 data-interval=”1000” =》相当于 js中设置了interval<br>ol class=”carousel-indicators”<br>li [data-target=#carousel-demo] data-slide-to=”0”索引号 class=”active”<br>li [data-target=#carousel-demo] data-slide-to=”1”<br>.carousel-inner / data-rid=”carousel” 自动旋转<br> a href=”#carousel-demo” .carousel-control-per data-slide=”prev” 小箭头<br> a href=”#carousel-demo”  .carousel-control-next data-slide=”next” 仙剑头<br>/<em> .carousel-item active<br>img .d-block w-100 src=”..” alt=”..”<br>img .d-block w-100 src=”..” alt=”..”<br>img .d-block w-100 src=”..” alt=”..” </em>/<br>在js中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(()=&gt;&#123;</span><br><span class="line">$(&apos;.carousel&apos;).carousel(&#123;interval:5000 &#125;)</span><br><span class="line">&#125;&#125;</span><br><span class="line">$(&apos;.carousel&apos;).on(&apos;slide.bs.carousel&apos;,(event)=&gt;&#123;</span><br><span class="line">console.log(&apos;slide:&apos;,&apos; 方向：$&#123;event.direction&#125; </span><br><span class="line">从： $&#123;event.from&#125;</span><br><span class="line">到:%&#123;event.to&#125;</span><br><span class="line">&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习 bootstrap4  框架&lt;br&gt;container class 可以给设置一个响应式的布局&lt;br&gt;container-fluid 流动&lt;br&gt;class row  每一行&lt;br&gt;class col 每一列&lt;br&gt;col 默认平分12&lt;br&gt;col-6  12个里面
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-8日 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/11/08/11-8%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/08/11-8日-学习日志/</id>
    <published>2018-11-08T14:51:21.000Z</published>
    <updated>2018-11-08T14:52:34.877Z</updated>
    
    <content type="html"><![CDATA[<p>引用和赋值</p><p>定义对象</p><p>var 001={</p><p>name:”小明”,</p><p>sex:”male”;</p><p>}</p><p>定义变量来使用对象</p><p> var person1 =001;</p><p>赋值 ； 引用地址 </p><p>用类的形式创建对象 </p><p>创建人的类：</p><p>function PersonClass(pName,pSex){</p><p>//为了区分函数的类和函数 </p><p>this.name  = pName;</p><p>this.sex =pSex;</p><p>this.slogan=fuction(){</p><p>console.log(“我是”+this.name);</p><p>}</p><p>}</p><p>构造函数：</p><p>var person1 =new PersonClass(“xuiaoming”,”male”);</p><p>var person2=new PersonClass(“xiaohong”,”female”);</p><p>//C# 中 class person {}; ; 使用的是 person person1 = new person(); 注意区别 </p><p>es5 function  -&gt; es6 class</p><p>js 基本包装类型 date math</p><p>创建一个空的对象 </p><p>var obj1={};</p><p>var obj2=new Object();// 空的对象 </p><p>转换类型</p><p>var n1 =1.23;</p><p>var str1=n1.tostring();</p><p>n1.toPrecision(2)  取两位</p><p>var str= “Hello World”</p><p>var n =str.charAt(2) 返回L </p><p>时间相关的对象：Date</p><p>var d =new date(); //获取时间</p><p>d.get Day(); // 获取星期 </p><p>计算代码的性能：耗时 </p><p>var time1 =new Date(); //获取了当前的时间 本地电脑的时间 </p><p>for (var i =0;i&lt;1000000;i++)</p><p>{</p><p> t++;</p><p>}</p><p>var time2 =new Date();</p><p>var n = time2.getTime() - time1.getTime();</p><p>Math ： 跟数学相关的   不是一个类  随机数  </p><p>命名空间  </p><p>Math.floor(Math.random()); //随机数 </p><p>从开始到现在  以上是js的核心语法 </p><p>业务 交互 web变成 一般与浏览器打交道  提供了很多方法 </p><p>页面：动态的 修改网页的内容 和更改文字  DOM操作 </p><p> 底层 ： 浏览器 类似于 存储  BOM 操作 </p><p>浏览器： 加载页面 ：简单的操作系统 </p><p>把网址转换成IP地址 </p><p>域名： <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>DNS服务器： 浏览器吧<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 发给DSNS服务器  然后返回地址 </p><p>浏览器收到网络地址  缓存在本地 </p><p>浏览器就要向服务器请求 </p><p>服务器收到了请求 </p><p>服务器 类似于振幅的办公大楼 里面有很多窗口 </p><p>端口 类似于 这个窗口 </p><p>服务器把请求的内容 处理 返回给浏览器 </p><p>浏览器收到文件  解析 </p><p>看到页面 </p><p>浏览器：多线程 </p><p>1.js引擎 </p><p>2.ui渲染</p><p>3.事件线程</p><p>4.发起请求的线程</p><p>5定时器的线程</p><p>js -&gt; 单线程的  -》 编程方便</p><p>银行里面只有一个柜台 处理与js相关的事情 </p><p>同步任务 ：</p><p>异步任务： </p><p>存钱：我要存1万 柜台问我一堆问题 我填了一堆单子 把钱给了里面 </p><p>排队：</p><p>同步：存1万 </p><p>异步： 我一堆问题 我填了一堆单子 -》 在旁边 先做了 -》 再去排队 </p><p>js 如何在浏览器生效</p><ol><li><p>载入阶段 默认：同步</p><pre><code>1. 获取页面内容 2.html-&gt;  解析 loading   载入DOM树：html   ​            head   ​            meta title script     同步  下载js     ​             js解释器对脚本进行解析 执行                body   ​            ....   解析完成            渲染-》文件在下载 图片    载入阶段结束 </code></pre></li></ol><p>2.事件阶段 异步 onload</p><p>//获取节点 操作dom</p><p>var n =document.getElementById(“div1”);</p><p>console.log(n);</p><p>n = document.getElementById(“div2”);</p><p>console.log(n);</p><p>延迟加载：当dom加载完之后 执行 </p><p>异步加载： 后续了解 </p><p>DOM BOM </p><p>js的库都放在 window 对象里面  -》 里面的方法都是全局的方法 </p><p> //BOM</p><p>弹窗  </p><p>同步：阻断</p><ol><li><p>alert(“”alert 弹窗 “) </p></li><li><p>var bcf =confirm(“confirm 弹窗”)；</p></li><li><p>var strpt = prompt(“prompt 输入：”，”默认值“); 返回用户输入的值</p><p>console.log(strpt);</p></li></ol><p>获取浏览器的导航栏的信息：</p><p>window.location 对象 </p><p>属性： url 的各个部分 </p><p>location.reload(); 刷新页面 </p><p>location.replace(“网址”)； 打开新的网址 </p><p>var bcf = confirm(“confirm 弹窗”)；</p><p>if(bcf)</p><p>{</p><p>location.replace(“<a href="http://www.baidu.com&quot;)" target="_blank" rel="noopener">http://www.baidu.com&quot;)</a>;</p><p>}</p><p>else location.reload();</p><p>浏览器的历史： 前进 后退 </p><p>history.back();</p><p>history.forward();</p><p>history.go(-1); back 1次</p><p>history.go(1); forward 1次</p><p>浏览器的信息：版本 厂家 </p><p>navigator.userAgent ();</p><p>获取浏览器的分辨率：</p><p>screen</p><p>bom 计时器</p><p>循环执行：var sil = setInterval( 函数名， 时间)；每个多少时间执行 函数 </p><pre><code>停掉： clearInterval(sil);</code></pre><p>执行一次： var sil = setTimeout(函数，时间); 到了 这个时间 执行函数 </p><pre><code>停跳： clearTimeout(sill);</code></pre><p>var num=0;</p><p>function add(){</p><p>console.log(“num = “+ ++num);</p><p>}</p><p>var sil =setInterval(add,1000);</p><p>function end(){</p><p>clearInterval(sil);</p><p>}</p><p>setTimeout(end,10000);</p><p>DOM的操作：</p><p>DOM -》 文档对象模型 </p><p>DOM树：</p><p> html文件 -》 人-》网页的数据</p><p>浏览器-》 数据结构 -》 方便 查找 修改 遍历 操作 </p><p> 样子-》树 </p><p>数据结构： </p><p>线性：单链表 循环链表  队列 栈 数组</p><p>树形：二叉树 平衡数 红黑树 </p><p>网状：有向图 无向图  -》 寻路算法  A*算法</p><p>3中最常用的方法来找到标签</p><p>1.id 唯一性 document.getElementById(“id_name”);</p><p>2.标签名   document.getElementsByTagName(“”);// 返回的是个数组 </p><p>3.class document.getElementsByClassName(“”); //返回的 还是 数组 </p><p>创建节点 </p><p>var p = document.createElement(“p”);</p><p>创建一个文本节点</p><p>var ptxt = document.createTextNode(“p1”);</p><p>p.appendChild(ptext);</p><p>添加节点 </p><p>div1.apppendChild(p);</p><p>删除节点 removeChile();</p><p>var div2=document.getElementById(“div2”);</p><p>div1.removeChild(div2);</p><p> 从父节点中删除 </p><p>div2.parentNode.removeChild(div2);</p><p>自己把自己删除</p><p>在节点中对属性 内容进行操作 </p><p>html 定义好的属性  .  对象的点来获取 以及修改</p><p>js中 class 要用 className 做修改 </p><p>img1.className</p><p>css 样式的修改 </p><p>img1.style.width=”100px”;</p><p>//获取属性 </p><p>img1.getAttribute(“dat”);</p><p>getAttribute();’</p><p>//设置属性</p><p>img1.setAttribute(“属性名”，”属性值”);</p><p>img1.removeAttribute（”src“）;</p><p>img1.addAttribute();</p><p>//修改 </p><p>var p1 =document.getElementById(“p1”);</p><p>p1.innerHTML =” 这是innerHTML <a href="www.baidu.com">this is a  </a>a&gt;”； </p><p>这里的 p1 和 img1 都是 id 名称   </p><p>时间：</p><p>交互 人可以去操作页面 </p><p> js -&gt; 事件 驱动 </p><p>用户-》 HTML元素-》产生一个事件-》 事件 主动的 调用 设定 方法  函数 </p><p>事件源： 产生事件的地方</p><p>事件的类型 ：  点击 键盘 </p><p>事件对象： 记录好 信息 </p><p>事件的处理程序 ：  函数  </p><p>注册： 把以后会发生的事情，先提前报备一下</p><p>举例：</p><p>没钱了就给家里打电话 你 肯定打电话</p><p>没钱了+打电话 -》你</p><p>时间的类型+ 函数 - 》 元素 </p><p>两种发现 实现注册</p><p>1.html的属性： </p><p>属性名： on + 事件的名字  onclick </p><p>属性值： 方法 </p><pre><code>直接在html设定通过js的元素对象来设定 </code></pre><p>html中设定</p><figure class="highlight plain"><figcaption><span>id </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">js文件中：</span><br><span class="line"></span><br><span class="line">```var num=0;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>add()```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```&#123;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>+ ++num);```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```&#125;</span><br></pre></td></tr></table></figure><p>通过 js 的元素对象来设定</p><p>var div1 =document.getElementById(“div1”);</p><p>div1.onclick=add;</p><p>2.通过调用系统提供的方法 </p><p>div1.addEventListener (时间类型click,函数add,事件的处理方式 bool false 冒泡 true 捕获);// 添加时间的监听者 </p><p>div1.addEventListener(“click”,add);</p><p>可以给一个标签绑定多个事件</p><p>div1.removeEventListener(“click”,add);</p><p>ie8以前  兼容性的问题 attachEvent() detachEvent() </p><p>JavaScript 事件函数和事件对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class="line"></span><br><span class="line">div1.addEventListener(&quot;click&quot;,add);</span><br><span class="line"></span><br><span class="line">事件对象event  提供了事件的详细信息</span><br><span class="line"></span><br><span class="line">具体发生时间的元素，鼠标的位置，点击的状态 键盘的按键等</span><br><span class="line"></span><br><span class="line">fuction  add(event )&#123;</span><br><span class="line"></span><br><span class="line">console.log(event);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">screenX Y : 屏幕的左上角 </span><br><span class="line"></span><br><span class="line">ClientX Y : 浏览器的左上角</span><br></pre></td></tr></table></figure><p>//与键盘有关的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html文件中</span><br><span class="line"></span><br><span class="line">input type=&quot;text&quot; name=&quot;a&quot; id=&quot;input1&quot;</span><br><span class="line"></span><br><span class="line">js文件中</span><br><span class="line"></span><br><span class="line">var input1 = document.getElementById(&quot;input1&quot;);//找到标签</span><br><span class="line"></span><br><span class="line">input1.addEventListener(&quot;keydown&quot;,add);//绑定事件</span><br><span class="line"></span><br><span class="line">fuction add(event)&#123;</span><br><span class="line"></span><br><span class="line">var e = event || window.event ;//ie8</span><br><span class="line"></span><br><span class="line">cosole.log(event);</span><br><span class="line"></span><br><span class="line">&#125;// 设置事件</span><br></pre></td></tr></table></figure><p>有一些事件 带有自己的默认值 </p><p>event.prevenDefault();//取消默认操作  在事件中操作</p><p> a1.onclick=add;</p><p>可以在事件中添加 return false ;</p><p> ie8 -&gt; event.returnvalue= false;</p><p>return false ; </p><p>事件的传播：</p><p>在默认的情况下面，点击页面下的一个标签，处在传播路径上的标签都会监听到对应的事件 </p><p>传播路径：</p><p>传播方式决定 </p><p>事件流： 对应标签接收到时间的顺序 </p><p>回升： 人-》 大山-》 人</p><p>两大阶段：</p><p>捕获阶段：从起始点 - 》 目标位置 </p><p>冒泡阶段：目标位置 - 》 起始点 </p><p>终止冒泡阶段</p><p>function div2Click(){</p><p>e.stopPropagation();</p><p>console.log(“冒泡阶段 终止 “)</p><p>}</p><p>事件代理：</p><p>html 文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul&gt;    </span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;&gt;</span><br></pre></td></tr></table></figure><p>js文件中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接设置在ulclick 中即可</span><br></pre></td></tr></table></figure><p> 以上 是关于js的 简单用法 ，蝉壳学院的 初级课程结束 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用和赋值&lt;/p&gt;
&lt;p&gt;定义对象&lt;/p&gt;
&lt;p&gt;var 001={&lt;/p&gt;
&lt;p&gt;name:”小明”,&lt;/p&gt;
&lt;p&gt;sex:”male”;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;定义变量来使用对象&lt;/p&gt;
&lt;p&gt; var person1 =001;&lt;/p&gt;
&lt;p&gt;赋值 ； 引
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-7日 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/11/07/11-7%E6%97%A5-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/07/11-7日-学习日志/</id>
    <published>2018-11-07T02:10:55.000Z</published>
    <updated>2018-11-07T14:04:10.114Z</updated>
    
    <content type="html"><![CDATA[<p>  首先和大家说一下昨天的凡东不是没有学习，而是都在学习，看ps的圣经宝典，但是因为一天的时间都耗在上上面了，也没有什么好记录笔记的。于是没有写学习日志。（并且得出结论，设计这种东西呢，如果没有天赋，那就只能持之以恒。短时间的锻炼是不存在的）  </p><p>  所以今天的凡东回归继续学习js,有些东西放下就好了。</p><p>js:</p><p>作用域：可访问变量的集合（对象、函数）</p><p>我们定义了一个变量，这个变量可以被使用的地方，可以使用的范围 </p><p>函数</p><p>全局作用域  全局变量 函数外定义的变量 在所有地方都能被访问</p><p>局部作用域 局部变量  在函数里面定义的变量 函数里面被访问到</p><p>function add(){</p><p>console.log(x);</p><p>x=100;</p><p>var y =100;//局部变量</p><p>}</p><p>add();</p><p>var x=1;// 全局变量</p><p>console.log(y);（报错）</p><p>在js中 y=100; 没有定义 默认定义为全局变量 </p><p>预解析：</p><p>浏览器获得js文件的时候 不是立刻去执行代码，全片快速的扫表一边 </p><p>把 变量 预先解析</p><p>把变量的声明 提前 全局 就是把var 提前 </p><p>扫完全局变量 再扫 函数体 将默认定义为全局变量的 变量 提前 </p><p><strong>闭包</strong>：<strong>变量的 私有化问题</strong>  （C#中的 private ）</p><p>局部变量的生命周期 在花括号开始到花括号结束    全局变量只要页面开着 他就活着 </p><p>全局变量谁都可以访问他并且可以 修改</p><p>所以如何将一个局部变量拥有全局变量的周期呢</p><p>function add(){</p><p>var counter=0; //定义局部变量 </p><p>plus= function(){//匿名函数</p><p> counter++;//伪全局变量 拥有全局变量的生命周期</p><p>console.log( counter);</p><p>}</p><p>}</p><p>函数的立即执行 函数申明和函数执行放在一起 </p><p>(function (){</p><p>var counter=0; //定义局部变量 </p><p>return  function(){//匿名函数</p><p> counter++;//伪全局变量 拥有全局变量的生命周期</p><p>console.log( counter);</p><p>}</p><p>})();</p><p>//</p><p>var plus = (function (){</p><p>var counter=0; //定义局部变量 </p><p>return  function(){//匿名函数</p><p> counter++;//伪全局变量 拥有全局变量的生命周期</p><p>console.log( counter);</p><p>}</p><p>})();// 标准的传统闭包 </p><p>plus();</p><p>创建对象举例:</p><p>var person1 ={</p><p>name:”xiaoming “</p><p>sex:”male”</p><p>slogan:”function(){</p><p>fro(var i =0;i&lt;10;i++){</p><p>console.log(“我是小明”)；</p><p>}</p><p>}</p><p>}</p><p>//在这里回顾一下，因为js是弱语言所以不用int string 定义变量 而在C#中  要在方法之中声明变量  int age = 16; string name =”xiaoming  “;  </p><p>js中也有类的概念 ： </p><p>类：系统自带 Arry 自己创建的类 </p><p>对象： 属性的基本操作  增删改查 遍历： 所有属性从头到尾 过一遍 </p><p>查 获取属性的值 、</p><p>var name =person1.name;</p><p>name = person1[“name”];</p><p>以字母开头 不用加引号的 可以用 . 来获取 </p><p>其余的要用括号扩起来 </p><p>person1[“text-text”]</p><p>增加： 修改属性的时候 如果对象里面没有这条属性 自动加上 </p><p>删除：delete delete person1.name; 两条属性中要加逗号  </p><p>遍历：  for (var pN in person1)</p><p>{</p><p>console.log(pN+person1[pN]);</p><p>}</p><p>//在C#语句中 便利一般用 foreach ; </p><p>对象的引用和赋值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  首先和大家说一下昨天的凡东不是没有学习，而是都在学习，看ps的圣经宝典，但是因为一天的时间都耗在上上面了，也没有什么好记录笔记的。于是没有写学习日志。（并且得出结论，设计这种东西呢，如果没有天赋，那就只能持之以恒。短时间的锻炼是不存在的）  &lt;/p&gt;
&lt;p&gt;  所以今天
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日学习日志</title>
    <link href="http://zhaofandong.github.io/2018/11/07/%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/07/日学习日志/</id>
    <published>2018-11-07T02:09:46.000Z</published>
    <updated>2018-11-07T02:09:46.652Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-5日学习日志</title>
    <link href="http://zhaofandong.github.io/2018/11/06/11-5%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/06/11-5日学习日志/</id>
    <published>2018-11-06T00:58:17.000Z</published>
    <updated>2018-11-06T00:58:39.942Z</updated>
    
    <content type="html"><![CDATA[<p>js基础：</p><p>原始类型： 数字Number 字符串 string  布尔值boolean undefined null </p><p>对象：object </p><p>类型转换 ： Number（a）</p><p>流程控制：</p><p>条件判断 if </p><p>switch 选择  </p><p>循环 for while </p><p>if(表达式成立)</p><p>{</p><p> 语句</p><p>}</p><p>举例：</p><p>var score = ?</p><p>if( score&gt;90)</p><p>{</p><p>console.log(“奖励100元”);</p><p>}</p><p>else if(score&gt;80)</p><p>{</p><p>console.log(“做家务”);</p><p>}</p><p>else</p><p>{</p><p>console.log(“做家务”);</p><p>}</p><p>//昨天因为被交出去吃夜宵了，然后就没有写太多 真是羞愧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js基础：&lt;/p&gt;
&lt;p&gt;原始类型： 数字Number 字符串 string  布尔值boolean undefined null &lt;/p&gt;
&lt;p&gt;对象：object &lt;/p&gt;
&lt;p&gt;类型转换 ： Number（a）&lt;/p&gt;
&lt;p&gt;流程控制：&lt;/p&gt;
&lt;p&gt;条件判断 if 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-4日学习日志</title>
    <link href="http://zhaofandong.github.io/2018/11/04/11-4%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/04/11-4日学习日志/</id>
    <published>2018-11-04T12:09:41.000Z</published>
    <updated>2018-11-04T12:23:17.852Z</updated>
    
    <content type="html"><![CDATA[<p>ie6 pngbug 恢复<br>ie6 对图片png24支持度不高 则会导致透明效果过无法正常显示<br>1.<br>在ps中 web所用格式  png-24 改为png-8  但是图片清晰度会有所下降<br>2.<br>用javascript 来解决该问题 需要像页面引入外部的一个javascript 文件<br>然后写一下简单的js代码 来处理该问题 后缀为js<br>不带Min的用在开发 min 用在生产 </p><p>引入js 文件<br>在body标签的最后引入js文件</p><script type="text/javascript" src="文件的路径 "> </script>在创建一个新的script标签 并且编写一些js代码<sctipt type="text/javascript">DD_belatedPNG.fix("div");<p>有一些情况，在特殊浏览器中需要执行，其他不需要执行，就用CSS HACK 代码</p><p>条件HACk  条件hack只对IE浏览器有效，其他的浏览器都会将他识别为注释<br><!--[if IE 6]><![endif]--></p><p>属性 hack<br>在样式前面添加一个下划线，样式只有ie6一下的浏览器才可以识别到</p><ul><li><p>ie7 一下<br>\9 ie6  以上<br>\0 在样式后面加  只有ie8 及以上的才能够识别<br>CSS HACK 尽量不使用 </p><p>选择器 hack  </p><ul><li>html  只有ie6 认识</li></ul><p>JavaScript 学习</p><p>node.js  用来写服务器 </p></li></ul><p>轻量级的编程语言<br>javascript 主要负责  ecmascript  dom  库 （API） bom<br>语法：<br>1.用字母 数字 特殊符号 组成的命令 </p><ol start="2"><li>字母大小写 十分铭感</li><li>行来区分 命令  在同一行 用;来区分命令<br>4.注释// 单行 /**/ 多行注释<br>5.输出<br>alert 弹窗 弹出警告床<br>console.log(); 在控制台中显示<br>cause now you strangle me in my sleep  and  i wake up with you  in my hand </li></ol><p>值<br>数字： 0 1 *1<br>小数 附属点：1.1111<br>字符串 ”dfsfdds“’1’<br>布尔值； true false<br>变量：<br>设x=1  x 就是变量 </p><p>声明变量：<br>var x ;创建一个变量<br>x=”helloWorld” ; 给变量赋值</p><p>var x= ; 同时 放在一起<br>多个变量<br>Var x,y,z ;<br>x=1;<br>y=1;<br>z=1;</p><p>var x=1, y=2,x=3;<br>x 变量名<br>1.变量名 必须是字母和数字<br>2.变量的开始， 最好字母<br>3.变量的大小写敏感</p><p>表达式：</p><p>运算符<br>算术 +- <em>/%<br>顺序 从左往右 先 +</em> / % 后加减<br>括号提高优先<br>++ 自增 – 自减<br>++a 先自增<br>a++ 后自增<br>NAN不是　数字　</p><p>比较　布尔值　<br>a=1&gt;2  false<br>== 值一样<br>===类和值</p><p>逻辑<br>&amp;&amp; || ！ </p><p>var a=1 ;<br>var b =”2”;<br>{}</p><p>var a ={60,61,62 } 数组<br>a[0] 第一个 </p><p>var a={“a1”:60,”a2”:61,”a3”:62}<br>a.a1 来访问<br>var a={0:60,1:61,2:62}<br>a[0];</p><p>如果对象时空<br>var a =null;</p><p>数据转换：<br>var a = “111”;<br>var b =Number(a );</p></sctipt>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ie6 pngbug 恢复&lt;br&gt;ie6 对图片png24支持度不高 则会导致透明效果过无法正常显示&lt;br&gt;1.&lt;br&gt;在ps中 web所用格式  png-24 改为png-8  但是图片清晰度会有所下降&lt;br&gt;2.&lt;br&gt;用javascript 来解决该问题 需要像页面引
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-3 学习日志 </title>
    <link href="http://zhaofandong.github.io/2018/11/03/11-3-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/11/03/11-3-学习日志/</id>
    <published>2018-11-03T13:47:39.000Z</published>
    <updated>2018-11-03T13:48:11.423Z</updated>
    
    <content type="html"><![CDATA[<p>border-collaspe<br>border-spacing<br> 如果设置了 border-collaspe border-spacing自动失效</p><p> th 表头的默认样式  </p><p> 隔行变色：<br> tr:nth-child(eve){background-color:…}<br> 移入变色：<br> tr:hover<br> {<br>   background-color…<br> }</p><p> ie8 不支持各行变色 </p><p> 长表格</p><p> 在某一些情况下 表格是非常的长的<br> 这时候就需要将表格分为三个部分，表头，表格的底部<br> html给我们提供了三个标签：<br> thead<br> tbody<br> tfood<br> <thead><br> <tr><br> <th></th><br> <th></th><br> </tr><br> </thead></p><p> thead 中的内容永远会显示在最上边 </p><p> 如果表格没有写tbody 浏览器会自动在表格中添加tbody<br> 并且将所有tr 放到tbody 中 </p><p> 表格布局<br> 以前更多的情况用表格来进行布局的 但是这种方式早已被css淘汰<br> 表格可以嵌套 在td里面再放一个表格 </p><p> 完善clearfix<br> 使用空的table可以蛤蜊附子元素的外边距，组织外边距的重合 </p><p> .box1:before{<br> display:table;<br> content=””;<br> }</p><p> .clearfix:after{<br> content:””<br> display:block;<br> clear:both;<br> }</p><p> 经过修改后的clearfix 是一个多功能的<br> .clearfix:before,<br> .clearfix:after{<br> content:””;<br> display:table;<br> clear:both;<br> }</p><p>表单<br>表单的作用就是用来将用户信息提交给服务器的，比如：百度的搜索框 注册 登入 这些操作都需要填写表单<br> 使用form标签创建一个表单 form标签中必须制定一个action属性<br> 该属性指向的是一个服务器地址 当我们提交表单会提交到action属性对应的地址<br> <form action=""><br> 使用form的仅仅是一个空白的表单，我们还需要向form添加不同的表单项 如果希望表单中的数据会提交到服务器中 还需要给表单制定一个name属性<br> 使用input来创建一个文本框 他的tyoe属性是text<br> <label for="um"> 用户名 </label><br> <input id="um" type="text" name="username"> name表示提交内容的名字<br> <input type="password" name="password"><br> <input type="submit" name=""> 提交按钮  再提交按钮中 通过value中 修改按钮的文字<br> 单选按钮通过name属性进行分组 name 属性相同的是一组按钮<br> 像这种需要用户选择但是不需要用户填写内容的表单项 还必须指定一个value属性<br> 这样被选中的表单想的value属性将最后提供给服务器<br> <input type="radio" name="gender" value="male"> 男<br> <input type="radio" name="gender" value="female" checked="checked"> 女<br> 多选框<br> <input type="checkbox" name="hobby" value="soccer" checked="checked">足球<br>  &lt;input type=”checkbox” name=”hobby” value=”bkb”checked=”checked”/&gt;篮球<br>   <input type="checkbox" name="hobby" value="btmt">羽毛球<br>  下来列表：使用select </form></p><select name="" multiple="multiple">  变成可多选<br><!--在下拉列表中使用option标签来创建一个一个列表项--><br><optgroup label="男明星"><option value="">a </option><br><option>b </option><br></optgroup><br><option value=""></option><option>b </option><br><br><option>c </option><br><br></select>  <p> </p><p> 查询字符串的形式发送欸我们的服务器<br> 属性名=属性值<br> <textarea name="info"></textarea> 长文本框<br> <input type="rest"></p><input type="button"> <p> 除了使用input 也可以使用button标签来创建按钮<br> <button type="submit"> </button> 更加灵活 </p><p> 表单提示文字<br> <label for=""> 标签 </label> 该属性值需要制定一个表单项的id值 </p><p> <fieldset>  对表单项进行分组<br> 可以讲表单项目的同一组放大器哦一个filedset里面 </fieldset></p><legend> 分组的名称</legend>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;border-collaspe&lt;br&gt;border-spacing&lt;br&gt; 如果设置了 border-collaspe border-spacing自动失效&lt;/p&gt;
&lt;p&gt; th 表头的默认样式  &lt;/p&gt;
&lt;p&gt; 隔行变色：&lt;br&gt; tr:nth-child(eve){b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-1日和2日的 学习日志大礼包</title>
    <link href="http://zhaofandong.github.io/2018/11/02/11-1%E6%97%A5%E5%92%8C2%E6%97%A5%E7%9A%84-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E5%A4%A7%E7%A4%BC%E5%8C%85/"/>
    <id>http://zhaofandong.github.io/2018/11/02/11-1日和2日的-学习日志大礼包/</id>
    <published>2018-11-02T05:16:31.000Z</published>
    <updated>2018-11-03T01:13:38.834Z</updated>
    
    <content type="html"><![CDATA[<p>布局：<br>透过页面看本质<br>想要盒子竖着 直接写<br>想要盒子横着 用浮动<br>margin 就是不会影响可见框的大小 但是会影响整个框的位置。<br>在文档流中 父元素的高度默认是被子元素撑开的<br>当子元素设置为浮动之后 父元素的高度会坍塌<br>会导致页面布局混乱<br>苏在在开发中一定要避免出现高度坍塌的问题<br>我们可以将父元素的高度写死，以避免坍塌的问题<br>但是 高度写死 不能自适应 元素高度  不太建议</p><p>解决高度塌陷问题：<br>根据w3c的标准 页面中每个元素都隐含一个属性叫做 Block Formatting Context<br>简称BFC  该属性可以设置打开或者关闭 默认是关闭的<br> 当开启元素的BFC以后 元素将会具有如下的特性：<br> 1.父元素的外边距不会和子元素重叠<br> 2开启BFC的元素不会被浮动元素所覆盖<br>３.开启BFC的元素可以包含浮动的文子元素　</p><p>如何开启元素的BFC<br>1.设置元素的浮动<br>使用这种方式开启，可以撑开父元素，但是会导致父元素的宽度丢失  而且使用这种方式协会下边的元素上移，不能解决问题<br>2.设置元素的绝对定位</p><p>3.设置元素为inline-block<br>可以解决问题，但是会导致宽度丢失，不推荐使用这种方式<br>3.将元素的overflow设置一个非visible<br>overflow：visible/hidden<br>推荐方式：将overflow设置为hidden是副作用最小的开启BFC的方式<br>但是在ie6及以下不支持BFC所以使用这种方式不能兼容ie<br>在ie６中虽然没有BFC　但是具有另一个隐含的属性　ＨａｓＬａｙｏｕｔ<br>该属性的作用和BFC类似，所以在IE６　中可以通过开启ｈａｓｌａｙｏｕｔ来解决问题<br>开启方式很多：<br>１.直接将元素的ｚｏｏｍ设置为１　<br>支持ｉｅ６以及一下　</p><p>导航条　<br>代码附上　</p><p>清除浮动　<br>我们有时候想取消其他元素浮动对当前元素产生的影响，这是可以采用ｃｌｅａｒ<br>　clear 可以用来清除其他浮动元素对当前元素的影响<br>可选值：<br> none 默认值 不清除浮动<br> left 清楚左侧浮动元素对当前元素的影响<br> right 清楚右侧浮动元素对当前元素的影响<br> both 清楚两侧浮动元素对当前元素的影响 </p><p>第二种解决高度塌陷问题：<br>ｃｌｅａｒ　用于兄弟元素之间<br>可以直接在高度塌陷的父元素 的最后 添加一个空白的ｄｉｖ<br>　由于这个ｄｉｖ并没有浮动<br>然后再对其进行清楚浮动，这样可以通过这个空白的ｄｉｖ来撑开父元素的告诉　<br>基本没有后副作用　<br>但是用这种方式虽然可以解决问题　，但是会在页面中添加多余的结构　</p><p>第三种　通过ａｆｔｅｒ　伪类　向元素的组后添加一个空白的块元素，　然后对其清除浮动<br>这样做和添加一个ｄｉｖ的原理一样，可以达到一个相同的效果<br>而且不会在页面中添加的多余的ｄｉｖ　　<br>.clearfix:after{<br>content:” “;<br>display:block;<br>clear:both;<br>}　</p><p>但是在ie6中还需要使用zoom 使用 </p><p>定位：<br>定位指的是将制定的元素放到页面的任意位置<br>通过定位可以任意摆放元素<br>position 属性设置元素位置、<br>static  默认值 没有开启<br>relative 开启元素的相对定位<br>absolute 开启元素的绝对定位<br>fixed 开去元素的固定定位 （也是绝对顶外的一种 ）</p><p>position:relative<br> 1.当开启了元素的相对定位以后，不设置偏移量之后 不会产生任何变化<br> 可以通过left right top bottom 来设置元素的偏移量<br> left ：相对于其定位位置的左偏移量<br> right: 元素相对于其定位位置的右边偏移量<br> top :上面<br> bottom: 下面<br>left:200px;<br>top:200px;<br> 2.相对定位相对的是它自身<br> 3.相对定位的元素不会脱离文档流<br> 4.相对定位会使元素提升一个层级 </p><p> 通常偏移量只需要使用两个就可以对一个元素进行定位<br> 一般会学则水平方向和垂直方向的一个偏移量进行定位</p><p>5.相对定会不会影响元素的性质 块还是块 元素还是元素 </p><p>绝对定位 </p><p>当position 为 absolute的时候  是绝对路径<br>1.并且 当设置absolute的时候  会是元素脱离文档流<br>2.开启绝对定位以后，如果不设置偏移量，则元素的位置不会发生变化<br>3.绝对定位是相对于离他最近的开启了定位的父祖先元素进行定位的<br>如果所有的祖先元素都没有开启定位，则先对于浏览器窗口进行定位<br>4.绝对定位会是元素提升一个层级<br>5.绝对定位会改变元素性质， 内联元素会变成块元素， 宽和高会被内容撑开 </p><p>固定定位：<br>当元素的position属性为fixed 则开始了元素的固定定位<br>固定定位也是一种绝对定位，大部分特点都和绝对定位一样<br>完全脱离文档流<br>不同的是：永远都会相对于浏览器窗口进行定位<br>固定定位会固定在浏览器窗口的某个位置 不会随着滚动条滚动<br>IE6 不支持固定定位 </p><p>z-index 可以设置元素的层级<br>可以为我们的z-index指定一个正整数作为值，该值将会作为当前元素的层级<br>层级越高，越优先显示。<br>对于没有开启定位的元素不能使用z-index</p><p>父元素在高也不会盖过子元素 </p><p>设置元素的透明背景<br>opacity 可以用来设置元素背景的透明<br>踏雪要一个0-1的值<br>0表示完全透明<br>1 表示完全不透明<br>opacity:0.6<br>在ie8及以下的浏览器中不支持  需要使用如下属性：<br>filter:alpha(opacity=50);</p><p>背景颜色：<br>backgorund-image:url(相对路径);<br>相对路径写在哪儿就相对于那个文件夹<br>如果背景图片大于元素，默认会显示图片的左上角<br>如果背景图片小于元素，默认会平铺的方式使图片充满元素<br>可以同时为一个元素制定背景颜色和背景图片<br>并且颜色在图片之后 作为底色 </p><p>backgorund-repeat :<br>repeat  双方向重复（平铺）<br>no-repeat 不重复</p><p>repeat-x:水平方向<br>repeat-y;垂直方向平铺 </p><p>Background-postion 可以调整图片元素在背景图片中的位置<br>background-postion: bottom right 右下</p><p> top right  left bottom center<br> 也可以直接指定偏移量<br> 100px 0px  水平垂直<br> 可以有正数 也可以有负数 </p><p>background-attachemt:用来设置背景图片是否随页面一起滚动<br>scroll fixed 背景图片会固定在某一位置 ，不随页面滚动<br>当背景图片background-attachment为fixed 时<br>背景图片的定位永远相对于浏览器的窗口<br>一般给 body 设置 不会给别的设置 </p><p>按钮</p><p>做完这个功能的时候，发现我们第一次切换图片会发现有一个非常快的闪烁<br>这个闪烁会造成一次不佳的用户体验<br>产生问题的原因：<br>背景图片是以外部资源的形式加载进网页的<br>浏览器没加载一个外部资源就需要单独的发送一次请求<br>但是我们外部资源并不是同时加载，浏览器会在资源被使用时加载资源<br>由于加载图片需要一定时间，所以在加载和显示过程会有一段时间，背景图片无法显示，导致出现闪烁的情况<br>同时加载一张图片上面有三个按钮<br>然后通过background-postion 进行图片移动 然后 就可以反应 这种图片叫做图片整合技术<br>（css sprite ）雪碧图<br>优点：<br>1.将多个图片整合为一张图片里，浏览器只需要发送一次请求，可以同时加载多个图片，提高访问效率，提高用户体验<br>2.将多个图片整合为一张图片，减少了图片的总大小，提高了请求速度，增加了用户体验</p><p>background: 通过该属性可以同时设置所有背景相关样式<br>height:5000px;<br>backround-color:#bfa;<br>background-image:url;<br>background-repeat:no-repeat;<br>background-position:center center;<br>background-attachment:fixed;</p><p>=<br>background:#bfa url center center no-repeat fixed;</p><p>没有顺序要求 谁在前 谁在后 都行<br>自己制作雪碧图 调整画布大小 通过图像 </p><p>表格</p><p>表格就是用来表示一些格式化的数据的<br>HTML 中用table 标签来表示表格<br>tr表示表格的一行 有几行就有几个tr<br>在tr中需要使用td来创建一个单元格 有几个单元格就有几个td<br>width=40% 来调整宽度<br>align center 来控制居中 </p><p><td colspan="2"></td> 横向占格<br>rowspan 用来设置纵向合并 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;布局：&lt;br&gt;透过页面看本质&lt;br&gt;想要盒子竖着 直接写&lt;br&gt;想要盒子横着 用浮动&lt;br&gt;margin 就是不会影响可见框的大小 但是会影响整个框的位置。&lt;br&gt;在文档流中 父元素的高度默认是被子元素撑开的&lt;br&gt;当子元素设置为浮动之后 父元素的高度会坍塌&lt;br&gt;会导致页
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10-31 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/10/31/10-31-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/10/31/10-31-学习日志/</id>
    <published>2018-10-31T14:17:19.000Z</published>
    <updated>2018-10-31T14:18:37.728Z</updated>
    
    <content type="html"><![CDATA[<p>外边距</p><p>很多浏览器为了在页面没有央视的时候，可以有一个更好的显示效果<br>所以有默认的margin 和 PADDING<br>但是很多情况下我们并不需要他的默认样式<br>所以在编写网站的时候我们需要删除他的默认样式、<br>在stylezhong<br>*{margin:0;<br> padding:0;}</p><p> 内联元素的盒子<br> 内联元素 不能设置width 和 height<br> padding 可以设置 水平方向 内边距<br> 内联元素可以设置垂直方向内边距，但是他不会影响页面的布局<br> 内联元素可以设置边框，但是垂直的边框不会影响到页面的布局<br> 内联元素支持水平方向的外边距  水平方向的外边距不会重叠  求和<br> 内联元素不支持垂直的外边距  看不出来的  </p><p> 样式  display<br> display:inline 把一个元素作为一个内联元素显示<br>  diaplay: block  把一个元素作为一个 块元素<br>  diaplay:inline block  可以是一个元素既有行内元素的特点 又有块元素的特点<br>  none  此元素不会被显示<br>   visibility 可以用来设置元素的隐藏和显示<br>   hidden   隐藏了 但是有位置占着 </p><p>overflow  </p><p>子元素默认是存在于父元素的内容去<br>理论上 子元素的最大可以等于父元素内容大小<br>如果子元素的大小超过了父元素的内容去 则超过的大小会在父元素以外的位置显示<br>超过父元素的内容 我们称为 溢出的 内容<br>父元素默认是将溢出内容，在父元素外边显示 </p><p>通过overflow 设置父元素 如何设置溢出内容<br>overflow:hidden; 溢出的内容会被修剪，不会显示<br>overflow:scroll  多出的滚动条  这个属性无论内容是否溢出 都会添加水平和垂直双向的滚动条<br>auto 会根据需求 自动添加 水平和垂直  </p><p>文档流 </p><p>  网页最底层 表示的是 一个页面中的位置<br>  我们所创建的元素默认都处在文档流中<br>  元素在文档流中的特点 </p><p>块元素：<br> 独占一行 自上向下排列<br> 默认宽度为父元素100%  当元素的高度或宽度为自动的时候， 指定内边距不会影响可见框的大小 而且是自动修改过宽度和高度，以适应内边距<br> 高度被内容撑开<br>内联元素<br>  只占自身的大小 从左自右排列<br> 在文档流中  宽和高都是由内容撑开的  </p><p>今天出了点小事情 先回一趟寝室 不住工作室了<br> 然后 回寝室补上  明天再把下文补上<br>晚安：）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外边距&lt;/p&gt;
&lt;p&gt;很多浏览器为了在页面没有央视的时候，可以有一个更好的显示效果&lt;br&gt;所以有默认的margin 和 PADDING&lt;br&gt;但是很多情况下我们并不需要他的默认样式&lt;br&gt;所以在编写网站的时候我们需要删除他的默认样式、&lt;br&gt;在stylezhong&lt;br&gt;*
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10-30 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/10/30/10-30-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/10/30/10-30-学习日志/</id>
    <published>2018-10-30T04:32:22.000Z</published>
    <updated>2018-10-30T15:07:07.153Z</updated>
    
    <content type="html"><![CDATA[<p>长度单位px 像素<br> 像素是我们在网页中使用的最多的一个单位<br> 一个像素就相当于我们屏幕中一个小点<br> 我们的屏幕实际上疾苦是有这个像素点的构成，但这些像素不能直接看见。<br> 不同的屏幕像素大小也不一样，像素越小，效果越好<br> 百分比% 父元素发生变化的时候，子元素也发生变化<br> 在我们创建一个自适应的界面，我们一般用百分比<br> em 和百分比类似，相对于当前元素的字体大小来计算的<br> 1em =1font-size </p><p> .box1{<br> width:50%;<br> height:50%;</p><p> }<br> <div class="box"></div><br> <div class="box1"></div></p><p> 颜色<br> rgb值表示颜色<br>也可以用16进制的rgb来表示颜色， 原理和上边RGB原理一样<br>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">三组两位的十六进制来表达一个颜色 </span><br><span class="line">RGB 数字 255个数字来表示 </span><br><span class="line">```#ff0000 这样重复的两个数字可以简单写 # f00</span><br></pre></td></tr></table></figure></p><p>字体样式</p><p>.p1{<br>color:red;<br>font-size:30px; 浏览器默认的文字大小16px<br>font-size 设置的不是文字本身的大小，在页面中，每个文字都是在一个看不见的框中 我们设置的font-size 实际上是我们格的高度<br>一般文字比格子小一点  根据字体的不同，显示的效果也不一样<br>font-family:华文彩云， 微软雅黑;   指定字体  并且可以指向多个字体 </p><p>}</p><p class="p1"><br>i am  p<br><br></p><p>字体分类：<br>serif （衬线字体）<br>sans-serif（ 非衬线字体）<br>monospace（等宽字体）<br>cursive（草书字体）<br>fantasy（虚幻字体）<br>可以将字体设置为这些大的分类<br>浏览器会自动选定指定的字体，并应用样式<br>一般讲大分类放在font-family 的最后一个 </p><p>font-style 可以用来设置文字他的斜体<br>font-style:italic;  oblique 倾斜 // 文字斜体  没有区别</p><p>大多数浏览器不会对倾斜和斜体作区分<br>font-weight:normal;bold;100；<br>改样式也可以设置100-900之间的9个值（但是用户计算机里面往往没有这多字体的级别 ，不能达到我们想要的效果 ）</p><p>font-variant:small-caps;文本小型大写字母显示 ；<br>.p2{<br>在CSS中还为我们提供了一个样式　叫ｆｏｎｔ<br>font:italic small-caps bold 60px “微软雅黑”<br>使用font 没有顺序要求 可写可不写  但是大小 字体一定要写 大小在倒数第二个 字体倒数第一个 }<br> 有多少个样式， 要解析几次 /</p><p> 行间距：<br> <style type="text/css"><br>我们只能通过设置行高来设置行间距<br>.p3{<br>line-height:40px;行高类似于单线本  线和线之间的距离  网页中的文字实际上也是写在看不见的行里  而文字会默认在行高中垂直居中<br>}<br>line-height 可以直接接受一个大小 也可以直接接受百分数 可以直接传一个正整数 则行高会设置成字体相应的倍数<br>对于单行文本  可以将行高设置为和父元素的高度一致 可以是单行文本在父元素中垂直居中<br>在font中也可以指定行高<br>font: 30px/50px  ;50px  值得就是行高<br> </style><br> </p><p class="p3"><br>  行间距设置<br> </p><br>盒子模型 框模型  box<br>css 处理页面，他认为欸每个元素都在一个不可见的盒子里<br>对网页的布局就是摆放盒子<br>内容区 content<br>内边距 padding<br>边框  border<br> 外边框  margin<br> 使用width来设置内容去的宽度  height来设置盒子内容取得高度<p></p><p> 设置边框<br> background-color<br> border-width<br> border-color<br> border-style<br> 三个不能缺一个 </p><p> 盒子可见大小要考虑到内容和边框<br> border-width: 上右下左的顺序  如果只有两个值 第一个给上下 第二个值应用给 左右<br> border color 也可以这么运用颜色<br> border style 默认没有边框  solid 实现 dotted 点状 dashed 虚线  double 双线<br> 大部分的浏览器中，边框的宽度和颜色都是有默认值的，而边框的样式都是none </p><p> 在css中 一个border 就可以设置刚才那三个样式 ，并且没有顺序<br> 但是  一旦指定  四条边都一样 不能单独指定</p><p> 但是 border -top border-bottom border- right border-left </p><p> 内边距 padding 就是盒子的内容区与盒子边框的距离<br> 会影响盒子的可见框的大小<br> 元素的背景会延伸到内边距<br> 盒子可见框的宽度 border-left-width+padding-left+width+ width + padding-right + border-right </p><p> padding:100px 200px 300 px  之类的会比较方便 </p><p> 外边距 盒子与其他盒子之间的距离<br> 他不会影响可见框的大小  而是会影响到盒子的位位置<br> 盒子有四个方向的外边距<br>  margin-top<br>  margin-right<br>  margin-bottom<br>  margin-left<br>  由于页面中的元素一般都是向上 向左<br>  所以注意当我们设置上和左边的外边距的时候，可能会影响 自身盒子的位置<br>   但是下和右 会影响其他盒子的位置<br>   外边距也可以指定为一个负值<br>   margin-left=-100px;<br>   则元素会向反方向移动<br>  margin 还可以设置为 auto  一般设置给水平方向<br>  如果将 right left 设置为auto  水平居中<br>  外边距简写字符 margin 可以同时设置四个 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;长度单位px 像素&lt;br&gt; 像素是我们在网页中使用的最多的一个单位&lt;br&gt; 一个像素就相当于我们屏幕中一个小点&lt;br&gt; 我们的屏幕实际上疾苦是有这个像素点的构成，但这些像素不能直接看见。&lt;br&gt; 不同的屏幕像素大小也不一样，像素越小，效果越好&lt;br&gt; 百分比% 父元素发生变
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10/20 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/10/20/10-20-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/10/20/10-20-学习日志/</id>
    <published>2018-10-20T03:54:19.000Z</published>
    <updated>2018-10-20T04:14:09.612Z</updated>
    
    <content type="html"><![CDATA[<p>最近又各种各样的突发事情，比如什么交中期报告。也只能怪自己准备不周吧。不能说是运气不好，天道酬勤。我相信我每一天所做的都会称为日后有用的。不能放弃，要坚持，脚踏实地，仰望天空。</p><p>伪元素</p><p>使用伪元素来表示元素中的一些特殊的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;wosh&lt;/p&gt;</span><br><span class="line">p:first-letter&#123;</span><br><span class="line">color:red</span><br><span class="line">&#125;</span><br><span class="line">p:first-line&#123;</span><br><span class="line">background:yellow;</span><br><span class="line">&#125;</span><br><span class="line">p:before&#123; content：XXX&#125;</span><br></pre></td></tr></table></figure></p><p>一般表示元素最前面的部分<br>一般before与content使用<br>after元素最后面 </p><p>属性选择器<br>title属性 可以给任何标签制定  当鼠标移入时，元素中的title中将作为提示的文字显示<br>p[属性名]{}<br>p[titile=”hello”]{};<br>p[title^=”ab”]{};以ab开头<br>p[title$=””]{};以什么结尾<br>p[title*=””]{}包含什么什么</p><p>子元素选择器<br>p:first-child{};<br>p:last-chlid{};<br>p:nth-child(1/even 偶数/odd 奇数 ){可以选中任意位置的元素};<br>p:first-of-type{} 所有元素的第一个<br>last-of-type  nth-of-type<br>child 所有子元素 type 实在当前类型的子元素中排列 </p><p>兄弟元素选择器<br>span之后的紧挨着的p变色<br>span + p{background:yellow;}<br>span ~p{ 选中后面的所有的P};</p><p>否定伪类<br>为所有的p元素设置一个背景颜色为黄色，出了class值为hello的<br>作用 可以从已许那种的元素中剔除某些元素<br>语法：<br>   :not(选择器)<br>   p:not(.hello){};</p><p>   样式继承<br>    孩子可以继承父亲的遗产  在 css中 祖先元素上的样式，也会被它的后代元素所继承<br>    </p><p><br>    <span> 我是span中的文字</span><br>    </p><br>    <span> 我是外面的span<br>    给p设定样式 ，span也会有样式<br>   利用集成，可以精益血基本的样式设置给祖先元素，这样后代的元素将会自动继承这些元素<p></p><p>   并不是所有的样式都会被子元素继承  比如：背景相关的像是都不会被继承 边框相关的样式 定位相关的样式</p><p>   当不同的选择器选择我同一个元素时候并且设置相同的样式，样式之间产生了冲突，最终到底采用哪个选择器哪一个样式，有选择器优先级决定<br>    内联样式 1000<br>    id选择器 100<br>    类和伪类 10<br>    元素选择器  优先级1<br>    通配选择器 0<br>    继承样式，没有优先级</p><pre><code>涉及到a的伪类一共有四个link visited hover active  四个是一样的  一样的时候 按顺序来显示 </code></pre><p>  上标 sup   sub下标  del 删除线 ins 下划线  pre 预格式 代码格式    code专门用来保存代码的</p></span>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近又各种各样的突发事情，比如什么交中期报告。也只能怪自己准备不周吧。不能说是运气不好，天道酬勤。我相信我每一天所做的都会称为日后有用的。不能放弃，要坚持，脚踏实地，仰望天空。&lt;/p&gt;
&lt;p&gt;伪元素&lt;/p&gt;
&lt;p&gt;使用伪元素来表示元素中的一些特殊的位置&lt;br&gt;&lt;figure
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10/19 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/10/19/10-19-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/10/19/10-19-学习日志/</id>
    <published>2018-10-19T07:58:43.000Z</published>
    <updated>2018-10-20T03:51:36.921Z</updated>
    
    <content type="html"><![CDATA[<p>html规范<br>html 中不取分大小写，但是我们一般都是用小写<br>html 中的注释不能嵌套<br>html 标签必须结构完整 要么成对出现 要么自结束标签<br>html 标签可以嵌套 但不能交叉嵌套<br>html 标签中的属性必须有值 值必须加引号  双引号 单引号都可以<br>内联框架  在一个页面引入另一个页面<br>iframe 来创建一个内敛框架  属性: src:指向一个外部页面的路径，可以使用相对路径 width; height;name：可以为我们的内联框架命名 </p><figure class="highlight plain"><figcaption><span>src</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在我们的现实开发中，我们不推荐使用内敛框架，内敛框架中的内容不会被搜索引擎检索</span><br><span class="line">超链接 使用a标签来创建一个超链接</span><br><span class="line">属性：</span><br><span class="line">herf  只想链接跳转的目标地址，可以写一个相对路径也可以写一个完整的地址</span><br><span class="line">```&lt;a herf=&quot;.....&quot;&gt; &lt;/a&gt;</span><br></pre></td></tr></table></figure><p>_self,表示在当前窗口中打开（默认值）<br>_blank,在新的窗口中打开链接</p><figure class="highlight plain"><figcaption><span>herf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```&lt;br/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>src</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">以上设置一个内联框架的name属性值，链接将会在制定的内联框架中打开\</span><br><span class="line">&lt;center&gt;标签中的内容会默认在页面中居中显示&lt;/center&gt;</span><br><span class="line">创建超链接是，如果地址不确定可以直接写一个#号作为占位符</span><br><span class="line">回到顶部</span><br><span class="line">如果将我们链接地址设为#，则点击超链接以后会自动跳转到当前页面的顶部</span><br><span class="line">html 有一个属性每一个元素都可以设置，该属性可以作为我们标签的唯一属性，这个属性就是id</span><br><span class="line">```&lt;a id=&quot;bottom&quot; &gt; ```不能用数字开头 id属性在同一个页面中 只能有一个 不能重复 </span><br><span class="line">```&lt;a herf=&quot;#bottom&quot;&gt;</span><br></pre></td></tr></table></figure><p>联系我们： 发送电子邮件的超链接  点击链接以后可以自动打开计算机中默认的客户端<br>herf=”mailto:邮件地址”</p><p>css 层叠样式表<br>多层的结构  一层叠一层<br>样式表可以将css编写到style的属性当中 给谁设置写在谁的里面<br>将样式直接编写到style属性中，这种要是称为内联样式<br>内联样式只对当前的标签的元素内容起作用<br>内联样式不方便复用<br>结构与表现耦合，不方便后期的维护，不方便使用，尽量避免使用<br><figure class="highlight plain"><figcaption><span>style</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">也可以将css样式编写到head中的style标签里</span><br><span class="line">，然后通过css样式编写到style标签中，通过css选择器选定院所，然后统一为他设置样式，进一步复用，编写到style中也可以是表现和结构进一步分离，也是我们推荐的</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">css选择器 来选择页面指定元素</span><br><span class="line">```p&#123;</span><br><span class="line">color:red;</span><br><span class="line">font-size:18px</span><br><span class="line"> &#125; 选中所有的p元素 </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>text表示文本 css表示 css文件</p><p>css编写到外部的文件中，然后通过link标签来讲外部的css文件引入到当前的页面中，这样外部文件中的Css样式表将会应用到当前页面中，<br><figure class="highlight plain"><figcaption><span>rel</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">将css样式统一编写到外部的样式表中，完全是结构和表现分离，可以是样式表在不同的页面使用，最大限度地使样式可以进行复用，将统一写在样式表中，</span><br><span class="line">通过link标签引入，可以利用浏览器的缓存加快用户访问的速度提高了用户体验。所以在开发中我们最推荐使用的方式就是用外部的css文件。</span><br><span class="line">在css中只能用css注释/*...只能写在style标签和css文件中*/</span><br><span class="line">选择器 声明块 </span><br><span class="line">选择器</span><br><span class="line">通过选择器可以选中页面中制定的元素，并且将声明块中的样式应用到选择器对应的元素上。</span><br><span class="line">声明块</span><br><span class="line">用一堆&#123;&#125;括起来</span><br><span class="line">实际上是一组一组名值对</span><br><span class="line">多个声明用;隔开</span><br><span class="line">声明的样式名和样式值用：来连接</span><br><span class="line"></span><br><span class="line">块元素和内联元素</span><br><span class="line">div就是一个块元素  块元素独占一行</span><br><span class="line">p h1 h2 h3  </span><br><span class="line">div这个标签没有任何语义 就是纯粹一个块元素 主要用来对我们的页面进行布局 </span><br><span class="line">span是一个内联元素 （行内元素）</span><br><span class="line">所谓行内元素，指的是只占自身大小的元素，不会占用一行</span><br><span class="line">a, img ,ifram span </span><br><span class="line">span 没有任何语义 span标签专门用来选中文字，然后为文字来设置样式 </span><br><span class="line">块元素主要重要做页面的布局，内联元素主要用来选中文本中设置样式 </span><br><span class="line">一般情况下只使用块元素去包含内联元素，而不会使用内联元素去包含一个块元素</span><br><span class="line">a元素可以包含任意元素，除了它本身</span><br><span class="line">p元素不可以包含任何块元素 </span><br><span class="line"></span><br><span class="line">css 常用选择器</span><br><span class="line">选中所有的p元素</span><br><span class="line">```p&#123;</span><br><span class="line">  color:red ;</span><br><span class="line">&#125;</span><br><span class="line">h1&#123;</span><br><span class="line"> color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>id选择器<br>通过元素的id的属性值选择唯一一个元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#p1&#123;</span><br><span class="line">font-size:20px </span><br><span class="line">&#125;</span><br><span class="line">&lt;p id=&quot;p1&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p> 我们可以为元素与设置class属性，class属性和id属性类似，只不过class属性可以重复<br>  拥有相同class属性值的元素，我们说他们是一组元素<br><figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;2&quot;&gt;&lt;p&gt;</span><br></pre></td></tr></table></figure></p><p>  类选择器<br>  通过元素的class属性值选中一组元素<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.p2&#123;</span><br><span class="line">color:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> class可以同时为一个元素设置过个class属性值，多个值之间使用空格隔开</p> <figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">选择器分组</span><br><span class="line">通过选择器分组可以同时选择多个选择器对应的元素</span><br><span class="line">语法：选择器1，选择器2，选择器N&#123;&#125;</span><br><span class="line"></span><br><span class="line">通配选择器</span><br><span class="line">可以选择页面中所有的元素</span><br><span class="line">```*&#123;</span><br><span class="line">color：red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  复合选择器（交集选择器）<br>  作用：<br>  可以选中同时满足多个选择器的元素<br>  语法：选择器1选择器2选择器N{} 一盘多用于class<br>  对于id选择器来说 不建议使用复合选择器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;span&gt;,,,&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p> 元素之间的关系：<br> 父元素：直接包含子元素的元素 div是p的父元素 而不是 span的父元素<br> 子元素：直接被父元素包含的元素<br> 祖先元素 div 是span的祖先元素<br> 后代元素元素：。。。<br> 兄弟元素：拥有同样的父元素的元素是兄弟元素。</p><p> 后代元素选择器：<br> 选定制定元素的后代元素<br> 语法：祖先元素 后代元素{}</p><p> 子元素选择器：<br> 选中制定父元素的指定子元素<br> 语法：父元素&gt;子元素{}<br> IE6 不支持子元素选择器 </p><p>伪类专门用来表示元素的一种状态<br> 比如：访问过的超链接，比如普通的超链接，比如获取焦点的文本框。<br> 当我们需要为处在这些状态的元素设置样式的时候，可以给他们设计伪类<br> a:link 正常连接<br> a:visited 访问过的链接<br> a:hover 鼠标滑过的链接<br> a:active 正常点击的链接<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```a:link&#123;color:red&#125;</span><br></pre></td></tr></table></figure></p><p> 由于涉及到用户的隐私问题，所以使用visited伪类只能设置用户的字体颜色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```a:active&#123;&#125;```超链接被点击的状态 </span><br><span class="line">p:hover&#123;&#125;也可以</span><br><span class="line">hover 和 active 也可以为其他的元素设计 但是 ie6不支持 超链接以外的元素 设置 。</span><br></pre></td></tr></table></figure></p><p><input type="text"> 文本输入框<br>input：focus{ background-color:yellow;}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">::selection 为P标签选中的内容使用样式 注意在火狐中需要其他的写法 前面加上-moz-  </span><br><span class="line">```p::selection&#123;background-color:orange&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;html规范&lt;br&gt;html 中不取分大小写，但是我们一般都是用小写&lt;br&gt;html 中的注释不能嵌套&lt;br&gt;html 标签必须结构完整 要么成对出现 要么自结束标签&lt;br&gt;html 标签可以嵌套 但不能交叉嵌套&lt;br&gt;html 标签中的属性必须有值 值必须加引号  双引号
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10/18 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/10/18/10-18-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/10/18/10-18-学习日志/</id>
    <published>2018-10-18T11:45:39.000Z</published>
    <updated>2018-10-18T11:51:06.174Z</updated>
    
    <content type="html"><![CDATA[<p>今天复习了html的基础内容，因为今天比较忙碌，所以简单的记录了一点。<br>相对路径：<br>相对路径指的是当前资源目录所在的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;../../image/2.gif&quot; alt=&quot;图片显示不出来的时候的文字&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>图片的格式:<br> jpeg图片支持的颜色比较多，图片可以压缩，不能透明<br> 一般用来保存照片等颜色丰富的图片<br>gif：<br>  颜色较少，简单透明，动态图。<br>  图片单一的时候或者动态图的时候可以使用gif<br>png:<br>用来支持颜色多，复杂透明的图片</p><p>图片使用规则： 效果不一致，效果好的，效果一致，选择小的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天复习了html的基础内容，因为今天比较忙碌，所以简单的记录了一点。&lt;br&gt;相对路径：&lt;br&gt;相对路径指的是当前资源目录所在的位置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="-学习" scheme="http://zhaofandong.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>10/17 学习日志 </title>
    <link href="http://zhaofandong.github.io/2018/10/17/10-17-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/10/17/10-17-学习日志/</id>
    <published>2018-10-17T13:41:00.000Z</published>
    <updated>2018-10-17T13:42:08.014Z</updated>
    
    <content type="html"><![CDATA[<p>html5 尚硅谷系列视频<br>网页有三部分组成：w3c标准<br>结构 表现 行为<br>html css javascript<br>结构用于描述页面的结构<br>css控制页面的元素的样式<br>javascript<br>用于响应用户操作<br>W2SSchool离线手册 html标签列表<br><!-- 属性 通过属性来设置标签如何处理标签中的内容 可以在开始标签中添加属性实际上就是名值对的结构 属性名=“属性值" 一个标签中可以同时设置多个属性，属性之间需要用空格隔开‘font 可循三个属性 color face size --><br> <font color="red"> </font><br> &lt;!DOTYPE html&gt;<br> 这是一个声明html5的 格式  不然浏览器会进入怪异模式 无法进行解析<br> 完整的标签被成为元素<br> 几进制就是满几进一</p><p> 在中文系统中 默认都是使用GB2312<br> 在html中，一些如&lt;&gt;这种特殊的字符是不能直接使用的<br> 需要使用一些特殊的符号来表示这些特殊的字符，这些特殊符号我们称之位实体&lt;转义字符串&gt;<br> 刘景澜琪解析到实体是，会自动将实体转换器对应的字符<br> 实体的语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;实体的名字;</span><br><span class="line">&lt; &amp;lt;</span><br><span class="line">&gt; &amp;gt;</span><br><span class="line">空格 &amp;nbsp;</span><br><span class="line">版权符号 &amp;copy;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;html5 尚硅谷系列视频&lt;br&gt;网页有三部分组成：w3c标准&lt;br&gt;结构 表现 行为&lt;br&gt;html css javascript&lt;br&gt;结构用于描述页面的结构&lt;br&gt;css控制页面的元素的样式&lt;br&gt;javascript&lt;br&gt;用于响应用户操作&lt;br&gt;W2SSchool
      
    
    </summary>
    
      <category term="-学习" scheme="http://zhaofandong.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>10/16 学习日志 bootstrap4初步学习</title>
    <link href="http://zhaofandong.github.io/2018/10/16/10-16-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-bootstrap4%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhaofandong.github.io/2018/10/16/10-16-学习日志-bootstrap4初步学习/</id>
    <published>2018-10-16T13:25:32.000Z</published>
    <updated>2018-10-16T13:54:44.420Z</updated>
    
    <content type="html"><![CDATA[<p>今天的学习有点尴尬，准备学习bootstrap4。但是在视频中可以直接通过控制div class text-center 来控制文本位置，但是源文件和我的操作不成功。准备重新开始学习。html5和css了。今天下载了layui和 bt4的包。一个星期内准备看完视频。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天的学习有点尴尬，准备学习bootstrap4。但是在视频中可以直接通过控制div class text-center 来控制文本位置，但是源文件和我的操作不成功。准备重新开始学习。html5和css了。今天下载了layui和 bt4的包。一个星期内准备看完视频。&lt;/p&gt;
      
    
    </summary>
    
      <category term="-学习" scheme="http://zhaofandong.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>10/15 学习日志</title>
    <link href="http://zhaofandong.github.io/2018/10/15/10-15-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://zhaofandong.github.io/2018/10/15/10-15-学习日志/</id>
    <published>2018-10-15T14:05:24.000Z</published>
    <updated>2018-10-15T14:19:30.515Z</updated>
    
    <content type="html"><![CDATA[<p>  最近比较忙，事件匆忙，快速记录最近学到的东西。<br>  首先是今天刚刚遇到的，如何取消鼠标悬停效果，就是那个淡蓝色的东西，我相信很多人也会遇到。之前我选择会选择在blend中慢慢磨一个出来，因为18号之前要做完，所以，我快速的从网上抄了代码过来。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;Style x:Key=&quot;NormalMouseButton&quot; TargetType=&quot;Button&quot;&gt;</span><br><span class="line">    &lt;Setter Property=&quot;OverridesDefaultStyle&quot; Value=&quot;True&quot; /&gt;</span><br><span class="line">    &lt;Setter Property=&quot;Cursor&quot; Value=&quot;Hand&quot; /&gt;</span><br><span class="line">    &lt;Setter Property=&quot;Template&quot;&gt;</span><br><span class="line">        &lt;Setter.Value&gt;</span><br><span class="line">            &lt;ControlTemplate TargetType=&quot;Button&quot;&gt;</span><br><span class="line">                &lt;Border Name=&quot;border&quot; BorderThickness=&quot;&#123;TemplateBinding BorderThickness&#125;&quot; BorderBrush=&quot;&#123;TemplateBinding BorderBrush&#125;&quot; Background=&quot;&#123;TemplateBinding Background&#125;&quot;&gt;</span><br><span class="line">                    &lt;ContentPresenter HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;</span><br><span class="line">                &lt;/Border&gt;</span><br><span class="line">                &lt;ControlTemplate.Triggers&gt;</span><br><span class="line">                    &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;</span><br><span class="line">                        &lt;Setter Property=&quot;Opacity&quot; Value=&quot;0.8&quot; /&gt;</span><br><span class="line">                    &lt;/Trigger&gt;</span><br><span class="line">                &lt;/ControlTemplate.Triggers&gt;</span><br><span class="line">            &lt;/ControlTemplate&gt;</span><br><span class="line">        &lt;/Setter.Value&gt;</span><br><span class="line">    &lt;/Setter&gt;</span><br><span class="line"> &lt;/Style&gt;</span><br></pre></td></tr></table></figure></p><p> 将这一段代码放入windows.Resourses 中，之后再button中引用style，一定要特别注意，引用的时候要加上StasticResource.在之后的学习日志之后我会提到。<br>接下来我将补充我昨天晚上遇到的问题。<br>首先是如何再WPF显示网页（参考资料：<a href="https://blog.csdn.net/veechange/article/details/72764364和https://www.cnblogs.com/cela/p/5000262.html）" target="_blank" rel="noopener">https://blog.csdn.net/veechange/article/details/72764364和https://www.cnblogs.com/cela/p/5000262.html）</a><br> 我选择的方法直接再后台Grid引用Source new URI<br>第二个WPF中如何让TextBox中的文字实现垂直居中<br>（参考资料：<a href="https://bbs.csdn.net/topics/391049047）" target="_blank" rel="noopener">https://bbs.csdn.net/topics/391049047）</a><br>第三个WPF passwordbox 圆角制作<br>（参考资料：<a href="https://www.cnblogs.com/renzhendewo/archive/2013/06/28/3160416.html）" target="_blank" rel="noopener">https://www.cnblogs.com/renzhendewo/archive/2013/06/28/3160416.html）</a><br>将以下节点复制到app.xaml的&lt;Application.Resources&gt;节点下</p><pre><code>&lt;Style TargetType=&quot;PasswordBox&quot;&gt;            &lt;Setter Property=&quot;Template&quot;&gt;                &lt;Setter.Value&gt;                    &lt;ControlTemplate TargetType=&quot;PasswordBox&quot;&gt;                        &lt;Grid&gt;                            &lt;Rectangle RadiusX=&quot;3&quot; RadiusY=&quot;3&quot; Fill=&quot;{TemplateBinding Background}&quot; Stroke=&quot;#7e94a9&quot;/&gt;                            &lt;ScrollViewer SnapsToDevicePixels=&quot;{TemplateBinding SnapsToDevicePixels}&quot; x:Name=&quot;PART_ContentHost&quot; Template=&quot;{DynamicResource ScrollViewerControlTemplate1}&quot;/&gt;                        &lt;/Grid&gt;                    &lt;/ControlTemplate&gt;                &lt;/Setter.Value&gt;            &lt;/Setter&gt;        &lt;/Style&gt;</code></pre><p>第四个WPF将TextBox的边框设为圆角<br>（参考资料：<a href="https://www.cnblogs.com/tommy-huang/p/6475791.html）" target="_blank" rel="noopener">https://www.cnblogs.com/tommy-huang/p/6475791.html）</a></p><pre><code>&lt;TextBox&gt;     &lt;TextBox.Resources&gt;          &lt;Style TargetType=&quot;{x:Type Border}&quot;&gt;              &lt;Setter Property=&quot;CornerRadius&quot; Value=&quot;4&quot;/&gt;              &lt;Setter Property=&quot;BorderBrush&quot; Value=&quot;#c1d0dc&quot;/&gt;           &lt;/Style&gt;     &lt;/TextBox.Resources&gt;&lt;/TextBox&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  最近比较忙，事件匆忙，快速记录最近学到的东西。&lt;br&gt;  首先是今天刚刚遇到的，如何取消鼠标悬停效果，就是那个淡蓝色的东西，我相信很多人也会遇到。之前我选择会选择在blend中慢慢磨一个出来，因为18号之前要做完，所以，我快速的从网上抄了代码过来。&lt;br&gt;    &lt;fi
      
    
    </summary>
    
      <category term="-学习" scheme="http://zhaofandong.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-C#" scheme="http://zhaofandong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#基础课堂 第一课内容</title>
    <link href="http://zhaofandong.github.io/2018/10/11/C-%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82-%E7%AC%AC%E4%B8%80%E8%AF%BE%E5%86%85%E5%AE%B9/"/>
    <id>http://zhaofandong.github.io/2018/10/11/C-基础课堂-第一课内容/</id>
    <published>2018-10-11T13:39:38.000Z</published>
    <updated>2018-10-12T04:42:17.235Z</updated>
    
    <content type="html"><![CDATA[<p>第一堂课程内容   </p><p>  上课没听懂的同学多看几遍。  </p><p></p><h3>一</h3><br>  首先， 什么是软件？软件其实是一种计算机程序，而计算机程序是为了得到某种结果，由计算机等具有信息处理能力的硬件装置执行的代码话指令集合。<br>  软件开发相关的概念：  <p></p><p> 1.算法：<br> 算法是指对计算机工作步骤和方法的描述，算法的每一个步骤都是严格规定好的，使其能够被计算机识别并正确执行，并且每一个步骤都能够被计算机理解为一个或者一组唯一的工作，而不会是计算机产生歧义。算法必须有开始和结束，并且保证算法规定的每一个步骤最终都能够被完成。</p><p>2.数据结构：<br>数据结构就是指各种类型数据之间的相互关系。</p><p>3.IDE：<br>IDE是Integrated Development Enviornment 的缩写，表示“集成开发环境”，它是一种用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试工具和图形化用户界面工具等，例如，用于开发C#程序的Visual Studio、用于开发Java程序的Eclipse等，都是集成开发环境</p><p>4.SDK：　　</p><p>SDK是software Development Kit 的缩写，中文意思是“软件开发工具包”。</p><p>5.编辑：<br>编译是把计算机语言变成计算机可以识别的二进制语言，由于计算机只识别0和1，所以编译程序九十八使用计算机语言编写的程序，编译成计算机可以识别的二进制程序的过程。</p><p></p><h2>二</h2><br>C#语言的特点：<br>1.彻底的面向对象设计，C#具有面向对象语言应有的一切特性：封装，继承和多态。2.兼容性好。3.完善的错误、异常处理机制。<p></p><p></p><h2>三</h2><br>在编写代码的时候，深蓝色是关键字，浅蓝色是标识符，其余是C#语句。大多都是这样的。<p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一堂课程内容   &lt;/p&gt;
&lt;p&gt;  上课没听懂的同学多看几遍。  &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;一&lt;/h3&gt;&lt;br&gt;  首先， 什么是软件？软件其实是一种计算机程序，而计算机程序是为了得到某种结果，由计算机等具有信息处理能力的硬件装置执行的代码话指令集合。&lt;br&gt;  
      
    
    </summary>
    
      <category term="-教学" scheme="http://zhaofandong.github.io/categories/%E6%95%99%E5%AD%A6/"/>
    
    
      <category term="-C#" scheme="http://zhaofandong.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>特五动词等</title>
    <link href="http://zhaofandong.github.io/2018/09/22/%E7%89%B9%E4%BA%94%E5%8A%A8%E8%AF%8D%E7%AD%89/"/>
    <id>http://zhaofandong.github.io/2018/09/22/特五动词等/</id>
    <published>2018-09-22T00:56:31.000Z</published>
    <updated>2018-09-22T01:48:53.015Z</updated>
    
    <content type="html"><![CDATA[<p>  &nbsp;<font face="微软雅黑">今天看书，翻到特殊的五段动词，他们虽然 る　前面是 ィ段　ェ段 结尾，但是动词活用的时候使用五段动词的变法。所以特地摘出来。以便之后复习。  </font></p><font face="明朝体"> &nbsp;あざける「嘲る」（嘲笑）&nbsp;&nbsp;いる「要る」（需要） &nbsp;&nbsp; おちいる「陥る」（陷入）　<br>かげる「陰る」（遮住）　かける「翔る」（飞翔）　かじる（咬）　<br>いじる「弄る」（摆弄）　きる「切る」（切断）　かえる「帰る」（回去）　<br>きしる（倾轧）　くつがえる（翻）　ける「蹴る」（踢）　<br>さえぎる（遮盖）　すべる「滑る」（滑）　しくじる（失败）<br>しげる「茂る」（繁茂）　しめる「湿る」（湿）　しゃべる（说）<br>　ちぎる「契る」（约定）　ちる「散る」（谢，落）　にぎる「握る（握）　<br>ねる「練る」（冶炼，锻造）　ののしる「罵る」（骂）　ひねる（扭，拧）　<br>ひるがえる「翻る」（飘动）　ふける（沉迷）　へる「減る」（减少）　ほ<br>とばしる（迸出）　まじる（混杂）　みなぎる（涨满）<br>よこぎる「横切  る」（横穿）　よみがえる（醒）しる「知る」(知道）<br></font>  <font face="微软雅黑"><br>以上内容来自于《学日语必读丛书-动词》</font> <p>（ps: 加分类和标签的时候 一定要有两个空格）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &amp;nbsp;&lt;font face=&quot;微软雅黑&quot;&gt;今天看书，翻到特殊的五段动词，他们虽然 る　前面是 ィ段　ェ段 结尾，但是动词活用的时候使用五段动词的变法。所以特地摘出来。以便之后复习。  &lt;/font&gt;&lt;/p&gt;
&lt;font face=&quot;明朝体&quot;&gt; &amp;nbsp;あざける
      
    
    </summary>
    
      <category term="-日语" scheme="http://zhaofandong.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="-心得" scheme="http://zhaofandong.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>搭建评论出现的问题以及心得</title>
    <link href="http://zhaofandong.github.io/2018/09/20/%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%BF%83%E5%BE%97/"/>
    <id>http://zhaofandong.github.io/2018/09/20/搭建评论出现的问题以及心得/</id>
    <published>2018-09-20T12:17:45.000Z</published>
    <updated>2018-09-20T12:48:39.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nbsp-nbsp-首先，先甩出Valine的官方传送门：-Valine官网-一切的源头都在这。也会有很多主题的解决方法在这。"><a href="#nbsp-nbsp-首先，先甩出Valine的官方传送门：-Valine官网-一切的源头都在这。也会有很多主题的解决方法在这。" class="headerlink" title="  &nbsp;&nbsp;首先，先甩出Valine的官方传送门：[Valine官网]一切的源头都在这。也会有很多主题的解决方法在这。"></a>  &nbsp;&nbsp;<font face="微软雅黑">首先，先甩出Valine的官方传送门：[Valine官网]一切的源头都在这。也会有很多主题的解决方法在这。</font></h2><p>   &nbsp;&nbsp;之前我用的主题是一个AL开头的一个，叫什么名字我也忘了。然后呢，我想在我的博客下面加入评论的插件，但是根据网络上Valine的教程并没有什么很好的解决方法。于是我再官网之中找到了方法，按照他的要求修改配置文件并且更改了脚本。但是，不知道大家有没有发现，再官网下来的脚本并不是js结尾而是pug作为后缀。然后，我的脚本改错了。（十分委屈╥﹏╥…）<br>   &nbsp;&nbsp;于是就乘着这次机会干脆直接换一个主题，建议用next。当然也强烈建议在GitHub上面下载。[Github上的Next主题]。为什么建议这样做呢？因为下面的方法操作都是最根本最基础的，虽然全都是英文注释。<br>   下来之后，再按照网上普遍的Valine教程和leanCloud就可以完成搭建。</p><p>###&nbsp;&nbsp;事实证明，选对一个模板会少有很多搭建的问题，建议大家先从next开始‘<br>&nbsp;&nbsp;今天就到这里了。也做好项目的tureMore部分，明天再是另一个界面。也许能好好的过这个中秋节了。   </p><font size="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;晚安 ：）</font><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nbsp-nbsp-首先，先甩出Valine的官方传送门：-Valine官网-一切的源头都在这。也会有很多主题的解决方法在这。&quot;&gt;&lt;a href=&quot;#nbsp-nbsp-首先，先甩出Valine的官方传送门：-Valine官网-一切的源头都在这。也会有很多主题的解
      
    
    </summary>
    
    
      <category term="-心得" scheme="http://zhaofandong.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
</feed>
